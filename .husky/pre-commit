#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Run client-side checks
cd src/client && npm run lint:fix && npm run format && npm run type-check

# Navigate back to the root directory
cd ../../

# Define possible virtual environment directories as a space-separated list
venv_dirs="venv .venv env myenv"
# Attempt to activate the virtual environment in the root directory
venv_found=false
for venv_dir in $venv_dirs; do
  if [ -d "$venv_dir/bin" ]; then
    echo "Activating virtual environment in root: $venv_dir"
    . "$venv_dir/bin/activate"
    venv_found=true
  fi
done

# Navigate to the server directory
cd src/server

# If no virtual environment was found in the root directory, check in the server directory
if [ "$venv_found" = false ]; then
  for venv_dir in $venv_dirs; do
    if [ -d "$venv_dir/bin" ]; then
      echo "Activating virtual environment in server: $venv_dir"
      . "$venv_dir/bin/activate"
      venv_found=true
    fi
  done
fi

# Check if a virtual environment was found
if [ "$venv_found" = false ]; then
  echo "No virtual environment found. Please ensure one is set up."
fi

# Run black and capture both stdout and stderr
black_output=$(black . 2>&1)
black_status=$?

# Deactivate the virtual environment if it was activated
if [ "$venv_found" = true ]; then
  deactivate
fi

# Check if the output from either black run contains "reformatted" or if the status code is non-zero
if echo "$black_output" | grep -q "reformat\|reformatted" || [ $black_status -ne 0 ]; then
  echo "Black found and corrected issues:"

  # Print output from black runs
  echo "Black output for server directory:"
  echo "$black_output"

  echo "Please review and commit the changes."
  exit 1  # Exit with an error code to prevent the commit
else
  echo "No formatting issues found."
fi